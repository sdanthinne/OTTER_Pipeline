`timescale 1ns / 1ps
//////////////////////////////////////////////////////////////////////////////////
// Company: 
// Engineer: 
// 
// Create Date: 10/04/2019 10:00:36 AM
// Design Name: 
// Module Name: 
// Project Name: 
// Target Devices: 
// Tool Versions: 
// Description: 
// 
// Dependencies: 
// 
// Revision:
// Revision 0.01 - File Created
// Additional Comments:
// 
//////////////////////////////////////////////////////////////////////////////////


module CUDecoder(
BR_EQ, BR_LT,BR_LTU, FUNC3, FUNC7, CU_OPCODE,ALU_FUN, ALU_SRCA, ALU_SRCB, PC_SOURCE, RF_WR_SEL, INT_TAKEN
    );
    
    input BR_EQ,BR_LT, BR_LTU, INT_TAKEN;
    input [2:0] FUNC3;
    input [6:0] FUNC7, CU_OPCODE;
    output logic ALU_SRCA;
    output logic [1:0] ALU_SRCB, RF_WR_SEL;
    output logic [2:0] PC_SOURCE;
    output logic [3:0] ALU_FUN;
    
    typedef enum logic [6:0] {
    LUI = 7'b0110111,
    AUIPC = 7'b0010111,
    JAL = 7'b1101111,
    JALR = 7'b1100111,
    BRANCH = 7'b1100011,
    LOAD = 7'b0000011,
    STORE = 7'b0100011,
    OP_IMM = 7'b0010011,
    OP = 7'b0110011,
    SYSTEM = 7'b1110011
    } opcode_t;
    opcode_t OPCODE;
    assign OPCODE = opcode_t'(CU_OPCODE);
    
    
    typedef enum logic [2:0] {
    BEQ = 3'b000,
    BNE = 3'b001,
    BLT = 3'b100,
    BGE = 3'b101,
    BLTU = 3'b110,
    BGEU = 3'b111
    } func3_t;
    func3_t func3_cd;
    assign func3_cd = func3_t'(FUNC3);
    
    always_comb
    begin
    ALU_SRCA = 0;
    ALU_SRCB = 0;
    PC_SOURCE = 0;
    RF_WR_SEL = 0;
    ALU_FUN = 0;
    case(OPCODE)
        LUI:
        begin
            ALU_FUN = 9;
            ALU_SRCA = 1;
            PC_SOURCE = 0;
            RF_WR_SEL = 3;
                       
        end
        AUIPC:
        begin
            ALU_FUN = 0;
            ALU_SRCA = 1;
            ALU_SRCB = 3;
            PC_SOURCE = 0;
            RF_WR_SEL = 3;
        end
        JAL:
        begin
            PC_SOURCE = 3;
            RF_WR_SEL = 0;
        end
        JALR:
        begin
            PC_SOURCE = 1;
            RF_WR_SEL = 0;
        end
        BRANCH:
        begin
            //PC_SOURCE = 0;n
            case(func3_cd)
            BEQ:
            begin
            PC_SOURCE = (BR_EQ == 1) ? 2 : 0;
            end
            BNE:
            begin
            PC_SOURCE = (BR_EQ == 0) ? 2 : 0;   
            end
            BLT:
            begin
            PC_SOURCE = (BR_LT == 1) ? 2 : 0;
            end
            BGE:
            begin
            PC_SOURCE = (BR_LT == 0) ? 2 : 0;
            end
            BLTU:
            begin
            PC_SOURCE = (BR_LTU == 1) ? 2 : 0;
            end
            BGEU:
            begin
            PC_SOURCE = (BR_LTU == 0) ? 2 : 0;
            //if(BR_LTU == 0) PC_SOURCE = 2;
            end
            default: PC_SOURCE = 0;
            endcase  

        end
        LOAD:
        begin
            ALU_FUN = 0; 
            ALU_SRCA = 0;
            ALU_SRCB = 1;
            PC_SOURCE = 0;
            RF_WR_SEL = 2;
        end
        
        STORE:
        begin
            ALU_FUN = 0;
            ALU_SRCA = 0;
            ALU_SRCB = 2;
            PC_SOURCE = 0;
        end
        
        OP_IMM:
        begin
            ALU_SRCA =0;
            ALU_SRCB = 1;
            PC_SOURCE = 0;
            RF_WR_SEL = 3;
            if(FUNC7 == 32 && FUNC3 == 5)
                begin
                ALU_FUN = {FUNC7[5], FUNC3};
                end
            else
                begin
                ALU_FUN = {1'b0, FUNC3};
                end
        end
        
        OP:
        begin
            ALU_SRCA = 0;
            ALU_SRCB = 0;
            PC_SOURCE = 0;
            RF_WR_SEL = 3;
           
            ALU_FUN = {FUNC7[5], FUNC3};
            
        end
        SYSTEM:
        begin
            ALU_SRCA = 0;
            ALU_FUN = 9;
            RF_WR_SEL = 1;
//            if(FUNC3 == 0)
//            begin
//            //check the order of these statements
//                PC_SOURCE = 5;
//            end
//            else
//            begin
//                PC_SOURCE = 0;
//            end
            PC_SOURCE = (FUNC3 == 0) ? 5:0;
           
            
        end
        
        default:
        begin
        $display("there was a problem in your CUDecoder. opcode: ");
        
        end
    endcase
    //could create a latch, check.
    //if(INT_TAKEN) PC_SOURCE = 4;
    PC_SOURCE = (INT_TAKEN) ? 4: PC_SOURCE;
    end
    
    
    
    
endmodule

module CondGen(RS1,RS2,BR_LT,BR_LTU, BR_EQ);
    input [31:0] RS1,RS2;
    output logic BR_LT,BR_LTU,BR_EQ;
    always_comb
    begin
    BR_EQ = (RS1 == RS2) ? 1:0;
    BR_LT = ($signed(RS1) < $signed(RS2)) ? 1:0;
    BR_LTU = (RS1 < RS2) ? 1 : 0;
    end


endmodule
